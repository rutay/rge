
layout (std140) uniform rge_b_material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

vec3 apply_light(vec3 view_pos, vec3 frag_pos, vec3 frag_norm, Light light)
{
    // ambient
    vec3 ambient = light.color * rge_b_material.ambient;

    // diffuse
    vec3 norm = normalize(frag_norm);
    vec3 light_dir = normalize(light.position - frag_pos);
    float diff = max(dot(normal, light_dir), 0);
    vec3 diffuse = light.color * (diff * material.diffuse);

    // specular
    vec3 view_dir = normalize(view_pos - frag_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
    vec3 specular = light.color * (spec * material.specular);

    return ambient + diffuse + specular;
}
